CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
PROJECT(ws-rnn)

SET(PROGRAM_NAME ws-rnn)
SET(CMAKE_CXX_FLAGS "-Wall -march=native -funroll-loops -g -D__STDC_FORMAT_MACROS")
IF ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
  IF (NOT ("${CMAKE_C_COMPILER_VERSION}" VERSION_LESS "4.5"))
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ofast -Wno-unused-result")
  ELSE ()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
  ENDIF ()
ENDIF()

OPTION(NOTHREAD "disable threads" OFF)

SET(SOURCE_DIR src)
SET(THIRD_PARTY_DIR ${SOURCE_DIR}/third_party)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DEIGEN_DONT_PARALLELIZE")
INCLUDE_DIRECTORIES(${THIRD_PARTY_DIR}/eigen_3.2.7)

IF (NOTHREAD)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOTHREAD")
ELSE ()
  FIND_PACKAGE(Threads REQUIRED)
  IF (THREADS_HAVE_PTHREAD_ARG)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  ENDIF()
ENDIF ()

IF (APPLE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNORT")
ENDIF ()

ADD_DEFINITIONS(-DNOCUDA)
SET(RNN_SOURCE_DIR ${SOURCE_DIR}/rnn)
INCLUDE_DIRECTORIES(${RNN_DIR})
INCLUDE_DIRECTORIES(${RNN_DIR}/layers)

# Build rnnlm
SET(SOURCE_FILES
  ${RNN_SOURCE_DIR}/hierarchical_softmax.cc
  ${RNN_SOURCE_DIR}/maxent.cc
  ${RNN_SOURCE_DIR}/nce.cc
  ${RNN_SOURCE_DIR}/nnet.cc
  ${RNN_SOURCE_DIR}/rnnlm.cc
  ${RNN_SOURCE_DIR}/words.cc
  ${RNN_SOURCE_DIR}/layers/gru_layer.cc
  ${RNN_SOURCE_DIR}/layers/interface.cc
  ${RNN_SOURCE_DIR}/layers/layer_stack.cc
  ${RNN_SOURCE_DIR}/layers/scrn_layer.cc
  ${RNN_SOURCE_DIR}/layers/simple_layer.cc)

ADD_EXECUTABLE(${PROGRAM_NAME} ${SOURCE_FILES})

TARGET_LINK_LIBRARIES(${PROGRAM_NAME} m stdc++)

IF (NOT NOTHREAD AND CMAKE_THREAD_LIBS_INIT)
  TARGET_LINK_LIBRARIES(${PROGRAM_NAME} ${CMAKE_THREAD_LIBS_INIT})
ENDIF ()

IF (NOT APPLE)
  TARGET_LINK_LIBRARIES(${PROGRAM_NAME} rt)
ENDIF ()
